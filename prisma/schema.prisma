// This is the Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// the User, Account, Session and VerificationToken model should look exactly the same for the adapter to be able to create the models according to a specific provider

// each model should have an id which is a string but a specific combination(objectId) and should be mapped to _id for it to work in mongodb (also starting the name of model's properties shouldnt be with _). by default should be created automatically
// if we wanted two models to have a relation, we should use @relation. then we choose a field from the current model and a reference field from the other one so the value from it can be stored in the field of the current model
// putting all fields that make up the unique constraint using @@unique([])

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String @db.ObjectId @id @map("_id") @default(auto())
  name              String?
  email             String? @unique
  emailVerified     DateTime?
  hashedPassword    String?
  image             String?
  favoriteIds       String[] @db.ObjectId
  properties        Property[]
  reservations      Reservation[]
  accounts          Account[]
  // sessions          Session[]
}

model Account {
  id                        String @db.ObjectId @id @map("_id") @default(auto())
  userId                    String @db.ObjectId
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String? @db.String
  access_token              String? @db.String
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.String
  session_state             String?
  refresh_token_expires_in  Int?

  user                      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Reservation {
  id                String @db.ObjectId @id @map("_id") @default(auto())
  guestId           String @db.ObjectId
  propertyId        String @db.ObjectId  
  startDate         DateTime
  endDate           DateTime
  totalPrice        Int
  peopleStaying     Int
  reservedAt        DateTime @default(now())

  guest             User @relation(fields: [guestId], references: [id], onDelete: Cascade)
  property          Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Property {
  id                String @db.ObjectId @id @map("_id") @default(auto()) 
  hostId            String @db.ObjectId
  title             String
  description       String
  price             Int
  country           String
  address           String
  allowedGuests     Int
  availableDates    DateTime[]
  options           String[]
  images            String[]
  reservations      Reservation[]

  host              User @relation(fields: [hostId], references: [id], onDelete: Cascade)
}

// model Session {
//   id                String @db.ObjectId @id @map("_id") @default(auto())
//   sessionToken      String @unique
//   userId            String @db.ObjectId
//   expires           DateTime

//   user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier        String @db.ObjectId @id @map("_id") @default(auto())
//   token             String @unique
//   expires           DateTime

//   @@unique([identifier, token])
// }